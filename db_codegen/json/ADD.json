{
  "mnemonic": "ADD",
  "summary": "Add",
  "index": 6,
  "instructions": [
    {
      "opcode": "04 ib",
      "instr": "ADD AL, imm8",
      "op_en": "I",
      "x64": true,
      "x86": true,
      "desc": "Add imm8 to AL."
    },
    {
      "opcode": "05 iw",
      "instr": "ADD AX, imm16",
      "op_en": "I",
      "x64": true,
      "x86": true,
      "desc": "Add imm16 to AX."
    },
    {
      "opcode": "05 id",
      "instr": "ADD EAX, imm32",
      "op_en": "I",
      "x64": true,
      "x86": true,
      "desc": "Add imm32 to EAX."
    },
    {
      "opcode": "REX.W + 05 id",
      "instr": "ADD RAX, imm32",
      "op_en": "I",
      "x64": true,
      "x86": false,
      "desc": "Add imm32 sign-extended to 64-bits to RAX."
    },
    {
      "opcode": "80 /0 ib",
      "instr": "ADD r/m8, imm8",
      "op_en": "MI",
      "x64": true,
      "x86": true,
      "desc": "Add imm8 to r/m8."
    },
    {
      "opcode": "REX + 80 /0 ib",
      "instr": "ADD r/m8, imm8",
      "op_en": "MI",
      "x64": true,
      "x86": false,
      "desc": "Add sign-extended imm8 to r/m8."
    },
    {
      "opcode": "81 /0 iw",
      "instr": "ADD r/m16, imm16",
      "op_en": "MI",
      "x64": true,
      "x86": true,
      "desc": "Add imm16 to r/m16."
    },
    {
      "opcode": "81 /0 id",
      "instr": "ADD r/m32, imm32",
      "op_en": "MI",
      "x64": true,
      "x86": true,
      "desc": "Add imm32 to r/m32."
    },
    {
      "opcode": "REX.W + 81 /0 id",
      "instr": "ADD r/m64, imm32",
      "op_en": "MI",
      "x64": true,
      "x86": false,
      "desc": "Add imm32 sign-extended to 64-bits to r/m64."
    },
    {
      "opcode": "83 /0 ib",
      "instr": "ADD r/m16, imm8",
      "op_en": "MI",
      "x64": true,
      "x86": true,
      "desc": "Add sign-extended imm8 to r/m16."
    },
    {
      "opcode": "83 /0 ib",
      "instr": "ADD r/m32, imm8",
      "op_en": "MI",
      "x64": true,
      "x86": true,
      "desc": "Add sign-extended imm8 to r/m32."
    },
    {
      "opcode": "REX.W + 83 /0 ib",
      "instr": "ADD r/m64, imm8",
      "op_en": "MI",
      "x64": true,
      "x86": false,
      "desc": "Add sign-extended imm8 to r/m64."
    },
    {
      "opcode": "00 /r",
      "instr": "ADD r/m8, r8",
      "op_en": "MR",
      "x64": true,
      "x86": true,
      "desc": "Add r8 to r/m8."
    },
    {
      "opcode": "REX + 00 /r",
      "instr": "ADD r/m8, r8",
      "op_en": "MR",
      "x64": true,
      "x86": false,
      "desc": "Add r8 to r/m8."
    },
    {
      "opcode": "01 /r",
      "instr": "ADD r/m16, r16",
      "op_en": "MR",
      "x64": true,
      "x86": true,
      "desc": "Add r16 to r/m16."
    },
    {
      "opcode": "01 /r",
      "instr": "ADD r/m32, r32",
      "op_en": "MR",
      "x64": true,
      "x86": true,
      "desc": "Add r32 to r/m32."
    },
    {
      "opcode": "REX.W + 01 /r",
      "instr": "ADD r/m64, r64",
      "op_en": "MR",
      "x64": true,
      "x86": false,
      "desc": "Add r64 to r/m64."
    },
    {
      "opcode": "02 /r",
      "instr": "ADD r8, r/m8",
      "op_en": "RM",
      "x64": true,
      "x86": true,
      "desc": "Add r/m8 to r8."
    },
    {
      "opcode": "REX + 02 /r",
      "instr": "ADD r8, r/m8",
      "op_en": "RM",
      "x64": true,
      "x86": false,
      "desc": "Add r/m8 to r8."
    },
    {
      "opcode": "03 /r",
      "instr": "ADD r16, r/m16",
      "op_en": "RM",
      "x64": true,
      "x86": true,
      "desc": "Add r/m16 to r16."
    },
    {
      "opcode": "03 /r",
      "instr": "ADD r32, r/m32",
      "op_en": "RM",
      "x64": true,
      "x86": true,
      "desc": "Add r/m32 to r32."
    },
    {
      "opcode": "REX.W + 03 /r",
      "instr": "ADD r64, r/m64",
      "op_en": "RM",
      "x64": true,
      "x86": false,
      "desc": "Add r/m64 to r64."
    }
  ],
  "op_en": {
    "RM": {
      "operand_1": "ModRM:reg (r, w)",
      "operand_2": "ModRM:r/m (r)",
      "operand_3": "NA",
      "operand_4": "NA"
    },
    "MR": {
      "operand_1": "ModRM:r/m (r, w)",
      "operand_2": "ModRM:reg (r)",
      "operand_3": "NA",
      "operand_4": "NA"
    },
    "MI": {
      "operand_1": "ModRM:r/m (r, w)",
      "operand_2": "imm8/16/32",
      "operand_3": "NA",
      "operand_4": "NA"
    },
    "I": {
      "operand_1": "AL/AX/EAX/RAX",
      "operand_2": "imm8/16/32",
      "operand_3": "NA",
      "operand_4": "NA"
    }
  },
  "page_desc": [
    "Adds the destination operand (first operand) and the source operand (second operand) and then stores the result in the destination operand. The destination operand can be a register or a memory location; the source operand can be an immediate, a register, or a memory location. (However, two memory operands cannot be used in one instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format.",
    "The ADD instruction performs integer addition. It evaluates the result for both signed and unsigned integer operands and sets the OF and CF flags to indicate a carry (overflow) in the signed or unsigned result, respectively. The SF flag indicates the sign of the signed result.",
    "This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.",
    "In 64-bit mode, the instruction\u2019s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."
  ]
}
