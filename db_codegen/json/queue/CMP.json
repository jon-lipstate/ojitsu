{
  "mnemonic": "CMP",
  "summary": "Compare Two Operands",
  "index": 75,
  "instructions": [
    {
      "opcode": "3C ib",
      "instr": "CMP AL, imm8",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm8 with AL."
    },
    {
      "opcode": "3D iw",
      "instr": "CMP AX, imm16",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm16 with AX."
    },
    {
      "opcode": "3D id",
      "instr": "CMP EAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm32 with EAX."
    },
    {
      "opcode": "REX.W + 3D id",
      "instr": "CMP RAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare imm32 sign-extended to 64-bits with RAX."
    },
    {
      "opcode": "80 /7 ib",
      "instr": "CMP r/m8, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm8 with r/m8."
    },
    {
      "opcode": "REX + 80 /7 ib",
      "instr": "CMP r/m8*, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare imm8 with r/m8."
    },
    {
      "opcode": "81 /7 iw",
      "instr": "CMP r/m16, imm16",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm16 with r/m16."
    },
    {
      "opcode": "81 /7 id",
      "instr": "CMP r/m32, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm32 with r/m32."
    },
    {
      "opcode": "REX.W + 81 /7 id",
      "instr": "CMP r/m64, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare imm32 sign-extended to 64-bits with r/m64."
    },
    {
      "opcode": "83 /7 ib",
      "instr": "CMP r/m16, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm8 with r/m16."
    },
    {
      "opcode": "83 /7 ib",
      "instr": "CMP r/m32, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare imm8 with r/m32."
    },
    {
      "opcode": "REX.W + 83 /7 ib",
      "instr": "CMP r/m64, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare imm8 with r/m64."
    },
    {
      "opcode": "38 /r",
      "instr": "CMP r/m8, r8",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r8 with r/m8."
    },
    {
      "opcode": "REX + 38 /r",
      "instr": "CMP r/m8*, r8*",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare r8 with r/m8."
    },
    {
      "opcode": "39 /r",
      "instr": "CMP r/m16, r16",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r16 with r/m16."
    },
    {
      "opcode": "39 /r",
      "instr": "CMP r/m32, r32",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r32 with r/m32."
    },
    {
      "opcode": "REX.W + 39 /r",
      "instr": "CMP r/m64,r64",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare r64 with r/m64."
    },
    {
      "opcode": "3A /r",
      "instr": "CMP r8, r/m8",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r/m8 with r8."
    },
    {
      "opcode": "REX + 3A /r",
      "instr": "CMP r8*, r/m8*",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare r/m8 with r8."
    },
    {
      "opcode": "3B /r",
      "instr": "CMP r16, r/m16",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r/m16 with r16."
    },
    {
      "opcode": "3B /r",
      "instr": "CMP r32, r/m32",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Compare r/m32 with r32."
    },
    {
      "opcode": "REX.W + 3B /r",
      "instr": "CMP r64, r/m64",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "Compare r/m64 with r64."
    }
  ],
  "op_en": [
    {
      "op_en": "RM",
      "tuple_type": "ModRM:reg (r)",
      "operand_1": "ModRM:r/m (r)",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MR",
      "tuple_type": "ModRM:r/m (r)",
      "operand_1": "ModRM:reg (r)",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MI",
      "tuple_type": "ModRM:r/m (r)",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "I",
      "tuple_type": "AL/AX/EAX/RAX (r)",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    }
  ],
  "page_desc": [
    "Compares the first source operand with the second source operand and sets the status flags in the EFLAGS register according to the results. The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in the same manner as the SUB instruction. When an immediate value is used as an operand, it is sign-extended to the length of the first operand.",
    "The condition codes used by the Jcc, CMOVcc, and SETccinstructions are based on the results of a CMP instruction. Appendix B, \u201cEFLAGS Condition Codes,\u201d in theIntel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual, Volume 1, shows the relationship of the status flags and the condition codes.",
    "In 64-bit mode, the instruction\u2019s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."
  ]
}
