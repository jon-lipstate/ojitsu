{
  "mnemonic": "ADDPS",
  "summary": "Add Packed Single-Precision Floating-Point Values",
  "index": 8,
  "instructions": [
    {
      "opcode": "NP 0F 58 /r ADDPS xmm1, xmm2/m128",
      "op_en": "A",
      "x64_x32": "V/V",
      "feature_flag": "SSE",
      "desc": "Add packed single-precision floating-point values from xmm2/m128 to xmm1 and store result in xmm1."
    },
    {
      "opcode": "VEX.128.0F.WIG 58 /r VADDPS xmm1,xmm2, xmm3/m128",
      "op_en": "B",
      "x64_x32": "V/V",
      "feature_flag": "AVX",
      "desc": "Add packed single-precision floating-point values from xmm3/m128 to xmm2 and store result in xmm1."
    },
    {
      "opcode": "VEX.256.0F.WIG 58 /r VADDPS ymm1, ymm2, ymm3/m256",
      "op_en": "B",
      "x64_x32": "V/V",
      "feature_flag": "AVX",
      "desc": "Add packed single-precision floating-point values from ymm3/m256 to ymm2 and store result in ymm1."
    },
    {
      "opcode": "EVEX.128.0F.W0 58 /r VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst",
      "op_en": "C",
      "x64_x32": "V/V",
      "feature_flag": "AVX512VL AVX512F",
      "desc": "Add packed single-precision floating-point values from xmm3/m128/m32bcst to xmm2 and store result in xmm1 with writemask k1."
    },
    {
      "opcode": "EVEX.256.0F.W0 58 /r VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst",
      "op_en": "C",
      "x64_x32": "V/V",
      "feature_flag": "AVX512VL AVX512F",
      "desc": "Add packed single-precision floating-point values from ymm3/m256/m32bcst to ymm2 and store result in ymm1 with writemask k1."
    },
    {
      "opcode": "EVEX.512.0F.W0 58 /r VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst {er}",
      "op_en": "C",
      "x64_x32": "V/V",
      "feature_flag": "AVX512F",
      "desc": "Add packed single-precision floating-point values from zmm3/m512/m32bcst to zmm2 and store result in zmm1 with writemask k1."
    }
  ],
  "op_en": [
    {
      "op_en": "A",
      "tuple_type": "NA",
      "operand_1": "ModRM:reg (r, w)",
      "operand_2": "ModRM:r/m (r)",
      "operand_3": "NA",
      "operand_4": "NA"
    },
    {
      "op_en": "B",
      "tuple_type": "NA",
      "operand_1": "ModRM:reg (w)",
      "operand_2": "VEX.vvvv (r)",
      "operand_3": "ModRM:r/m (r)",
      "operand_4": "NA"
    },
    {
      "op_en": "C",
      "tuple_type": "Full",
      "operand_1": "ModRM:reg (w)",
      "operand_2": "EVEX.vvvv (r)",
      "operand_3": "ModRM:r/m (r)",
      "operand_4": "NA"
    }
  ],
  "page_desc": [
    "Adds four, eight or sixteen packed single-precision floating-point values from the first source operand with the second source operand, and stores the packed single-precision floating-point result in the destination operand.",
    "EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1.",
    "VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding ZMM register destination are zeroed.",
    "VEX.128 encoded version: the first source operand is a XMM register. The second source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed.",
    "128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper Bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified."
  ]
}
