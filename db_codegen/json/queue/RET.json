{
  "mnemonic": "RET",
  "summary": "Return from Procedure",
  "index": 568,
  "instructions": [
    {
      "opcode": "C3",
      "instr": "RET",
      "op_en": "ZO",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Near return to calling procedure."
    },
    {
      "opcode": "CB",
      "instr": "RET",
      "op_en": "ZO",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Far return to calling procedure."
    },
    {
      "opcode": "C2 iw",
      "instr": "RET imm16",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Near return to calling procedure and pop imm16 bytes from stack."
    },
    {
      "opcode": "CA iw",
      "instr": "RET imm16",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "Far return to calling procedure and pop imm16 bytes from stack."
    }
  ],
  "op_en": [
    {
      "op_en": "ZO",
      "tuple_type": "NA",
      "operand_1": "NA",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "I",
      "tuple_type": "imm16",
      "operand_1": "NA",
      "operand_2": "NA",
      "operand_3": "NA"
    }
  ],
  "page_desc": [
    "Transfers program control to a return address located on the top of the stack. The address is usually placed on the stack by a CALL instruction, and the return is made to the instruction that follows the CALL instruction.",
    "The optional source operand specifies the number of stack bytes to be released after the return address is popped; the default is none. This operand can be used to release parameters from the stack that were passed to the called procedure and are no longer needed. It must be used when the CALL instruction used to switch to a new procedure uses a call gate with a non-zero word count to access the new procedure. Here, the source operand for the RET instruction must specify the same number of bytes as is specified in the word count field of the call gate.",
    "The RET instruction can be used to execute three different types of returns:",
    "The inter-privilege-level return type can only be executed in protected mode. See the section titled \u201cCalling Procedures Using Call and RET\u201d in Chapter 6 of theIntel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual, Volume 1, for detailed information on near, far, and inter-privilege-level returns.",
    "When executing a near return, the processor pops the return instruction pointer (offset) from the top of the stack into the EIP register and begins program execution at the new instruction pointer. The CS register is unchanged.",
    "When executing a far return, the processor pops the return instruction pointer from the top of the stack into the EIP register, then pops the segment selector from the top of the stack into the CS register. The processor then begins program execution in the new code segment at the new instruction pointer.",
    "The mechanics of an inter-privilege-level far return are similar to an intersegment return, except that the processor examines the privilege levels and access rights of the code and stack segments being returned to determine if the control transfer is allowed to be made. The DS, ES, FS, and GS segment registers are cleared by the RET instruction during an inter-privilege-level return if they refer to segments that are not allowed to be accessed at the new privilege level. Since a stack switch also occurs on an inter-privilege level return, the ESP and SS registers are loaded from the stack.",
    "If parameters are passed to the called procedure during an inter-privilege level call, the optional source operand must be used with the RET instruction to release the parameters on the return. Here, the parameters are released both from the called procedure\u2019s stack and the calling procedure\u2019s stack (that is, the stack being returned to).",
    "In 64-bit mode, the default operation size of this instruction is the stack-address size, i.e., 64 bits. This applies to near returns, not far returns; the default operation size of far returns is 32 bits.",
    "Refer to Chapter 6, \u201cProcedure Calls, Interrupts, and Exceptions\u201d and Chapter 18, \u201cControl-Flow Enforcement Technology (CET)\u201d in theIntel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual, Volume 1for CET details.",
    "Instruction ordering.Instructions following a far return may be fetched from memory before earlier instructions complete execution, but they will not execute (even speculatively) until all instructions prior to the far return have completed execution (the later instructions may execute before data stored by the earlier instructions have become globally visible).",
    "Unlike near indirect CALL and near indirect JMP, the processor will not speculatively execute the next sequential instruction after a near RET unless that instruction is also the target of a jump or is a target in a branch predictor."
  ]
}
