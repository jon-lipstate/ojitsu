{
  "mnemonic": "TEST",
  "summary": "Logical Compare",
  "index": 638,
  "instructions": [
    {
      "opcode": "A8 ib",
      "instr": "TEST AL, imm8",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm8 with AL; set SF, ZF, PF according to result."
    },
    {
      "opcode": "A9 iw",
      "instr": "TEST AX, imm16",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm16 with AX; set SF, ZF, PF according to result."
    },
    {
      "opcode": "A9 id",
      "instr": "TEST EAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm32 with EAX; set SF, ZF, PF according to result."
    },
    {
      "opcode": "REX.W + A9 id",
      "instr": "TEST RAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result."
    },
    {
      "opcode": "F6 /0 ib",
      "instr": "TEST r/m8, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm8 with r/m8; set SF, ZF, PF according to result."
    },
    {
      "opcode": "REX + F6 /0 ib",
      "instr": "TEST r/m8*, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "AND imm8 with r/m8; set SF, ZF, PF according to result."
    },
    {
      "opcode": "F7 /0 iw",
      "instr": "TEST r/m16, imm16",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm16 with r/m16; set SF, ZF, PF according to result."
    },
    {
      "opcode": "F7 /0 id",
      "instr": "TEST r/m32, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND imm32 with r/m32; set SF, ZF, PF according to result."
    },
    {
      "opcode": "REX.W + F7 /0 id",
      "instr": "TEST r/m64, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result."
    },
    {
      "opcode": "84 /r",
      "instr": "TEST r/m8, r8",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND r8 with r/m8; set SF, ZF, PF according to result."
    },
    {
      "opcode": "REX + 84 /r",
      "instr": "TEST r/m8*, r8*",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "AND r8 with r/m8; set SF, ZF, PF according to result."
    },
    {
      "opcode": "85 /r",
      "instr": "TEST r/m16, r16",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND r16 with r/m16; set SF, ZF, PF according to result."
    },
    {
      "opcode": "85 /r",
      "instr": "TEST r/m32, r32",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AND r32 with r/m32; set SF, ZF, PF according to result."
    },
    {
      "opcode": "REX.W + 85 /r",
      "instr": "TEST r/m64, r64",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "AND r64 with r/m64; set SF, ZF, PF according to result."
    }
  ],
  "op_en": [
    {
      "op_en": "I",
      "tuple_type": "AL/AX/EAX/RAX",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MI",
      "tuple_type": "ModRM:r/m (r)",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MR",
      "tuple_type": "ModRM:r/m (r)",
      "operand_1": "ModRM:reg (r)",
      "operand_2": "NA",
      "operand_3": "NA"
    }
  ],
  "page_desc": [
    "Computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand) and sets the SF, ZF, and PF status flags according to the result. The result is then discarded.",
    "In 64-bit mode, using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."
  ]
}
