{
  "mnemonic": "OR",
  "summary": "Logical Inclusive OR",
  "index": 400,
  "instructions": [
    {
      "opcode": "0C ib",
      "instr": "OR AL, imm8",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AL OR imm8."
    },
    {
      "opcode": "0D iw",
      "instr": "OR AX, imm16",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "AX OR imm16."
    },
    {
      "opcode": "0D id",
      "instr": "OR EAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "EAX OR imm32."
    },
    {
      "opcode": "REX.W + 0D id",
      "instr": "OR RAX, imm32",
      "op_en": "I",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "RAX OR imm32 (sign-extended)."
    },
    {
      "opcode": "80 /1 ib",
      "instr": "OR r/m8, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m8 OR imm8."
    },
    {
      "opcode": "REX + 80 /1 ib",
      "instr": "OR r/m8*, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r/m8 OR imm8."
    },
    {
      "opcode": "81 /1 iw",
      "instr": "OR r/m16, imm16",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m16 OR imm16."
    },
    {
      "opcode": "81 /1 id",
      "instr": "OR r/m32, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m32 OR imm32."
    },
    {
      "opcode": "REX.W + 81 /1 id",
      "instr": "OR r/m64, imm32",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r/m64 OR imm32 (sign-extended)."
    },
    {
      "opcode": "83 /1 ib",
      "instr": "OR r/m16, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m16 OR imm8 (sign-extended)."
    },
    {
      "opcode": "83 /1 ib",
      "instr": "OR r/m32, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m32 OR imm8 (sign-extended)."
    },
    {
      "opcode": "REX.W + 83 /1 ib",
      "instr": "OR r/m64, imm8",
      "op_en": "MI",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r/m64 OR imm8 (sign-extended)."
    },
    {
      "opcode": "08 /r",
      "instr": "OR r/m8, r8",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m8 OR r8."
    },
    {
      "opcode": "REX + 08 /r",
      "instr": "OR r/m8*, r8*",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r/m8 OR r8."
    },
    {
      "opcode": "09 /r",
      "instr": "OR r/m16, r16",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m16 OR r16."
    },
    {
      "opcode": "09 /r",
      "instr": "OR r/m32, r32",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r/m32 OR r32."
    },
    {
      "opcode": "REX.W + 09 /r",
      "instr": "OR r/m64, r64",
      "op_en": "MR",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r/m64 OR r64."
    },
    {
      "opcode": "0A /r",
      "instr": "OR r8, r/m8",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r8 OR r/m8."
    },
    {
      "opcode": "REX + 0A /r",
      "instr": "OR r8*, r/m8*",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r8 OR r/m8."
    },
    {
      "opcode": "0B /r",
      "instr": "OR r16, r/m16",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r16 OR r/m16."
    },
    {
      "opcode": "0B /r",
      "instr": "OR r32, r/m32",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "Valid",
      "desc": "r32 OR r/m32."
    },
    {
      "opcode": "REX.W + 0B /r",
      "instr": "OR r64, r/m64",
      "op_en": "RM",
      "x64": "Valid",
      "x32": "N.E.",
      "desc": "r64 OR r/m64."
    }
  ],
  "op_en": [
    {
      "op_en": "I",
      "tuple_type": "AL/AX/EAX/RAX",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MI",
      "tuple_type": "ModRM:r/m (r, w)",
      "operand_1": "imm8/16/32",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "MR",
      "tuple_type": "ModRM:r/m (r, w)",
      "operand_1": "ModRM:reg (r)",
      "operand_2": "NA",
      "operand_3": "NA"
    },
    {
      "op_en": "RM",
      "tuple_type": "ModRM:reg (r, w)",
      "operand_1": "ModRM:r/m (r)",
      "operand_2": "NA",
      "operand_3": "NA"
    }
  ],
  "page_desc": [
    "Performs a bitwise inclusive OR operation between the destination (first) and source (second) operands and stores the result in the destination operand location. The source operand can be an immediate, a register, or a memory location; the destination operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of the result of the OR instruction is set to 0 if both corresponding bits of the first and second operands are 0; otherwise, each bit is set to 1.",
    "This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.",
    "In 64-bit mode, the instruction\u2019s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits."
  ]
}
